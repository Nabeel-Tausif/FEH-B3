#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <math.h>
#include <FEHServo.h>
#include <FEHRPS.h>
#include <FEHAccel.h>
#include <FEHSD.h>

#define PI 3.14159265
//declare motors and sensors

FEHMotor front(FEHMotor::Motor0, 7.2);
FEHMotor right(FEHMotor::Motor1, 7.2);
FEHMotor back(FEHMotor::Motor2, 7.2);
FEHMotor left(FEHMotor::Motor3, 7.2);

DigitalInputPin FrontSwitch(FEHIO::P1_7);
DigitalInputPin LeftSwitch(FEHIO::P2_0);

AnalogInputPin CdS_cell(FEHIO::P0_0);

FEHServo arm_servo(FEHServo::Servo0);


#define CARJACKANGLE 120
#define IDEALPOWER 50
#define SPINPOWER 25


void RPSTest()
{

    LCD.Clear();
    //Write initial screen info
   LCD.WriteRC("RPS Test Program",0,0);
   LCD.WriteRC("X Position:",2,0);
   LCD.WriteRC("Y Position:",3,0);
   LCD.WriteRC("   Heading:",4,0);

   LCD.WriteRC(" Fuel Type:",6,0);

    while( true )
    {
        LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
        LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
        LCD.WriteRC(RPS.Heading(),4,12); //update the heading
        LCD.WriteRC(RPS.FuelType(),6,12);

        Sleep(10); //wait for a 10ms to avoid updating the screen too quickly
    }
}

void ServoSetup()
{
    arm_servo.SetMin(500);
    arm_servo.SetMax(2450);
}

void MoveTime(float degrees, float power, int time)
{
    float radians = degrees * (PI/180.0);
    front.SetPercent(power*-cos(radians));
    right.SetPercent(power*-sin(radians));
    back.SetPercent(power*cos(radians));
    left.SetPercent(power*sin(radians));
    Sleep(time);
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
}
void MoveTimeFloat(float degrees, float power, float time)
{
    float radians = degrees * (PI/180.0);
    front.SetPercent(power*-cos(radians));
    right.SetPercent(power*-sin(radians));
    back.SetPercent(power*cos(radians));
    left.SetPercent(power*sin(radians));
    Sleep(time);
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
}

void MoveDead(float degrees, float power)
{
    float radians = degrees * (PI/180.0);
    front.SetPercent(power*-cos(radians));
    right.SetPercent(power*-sin(radians));
    back.SetPercent(power*cos(radians));
    left.SetPercent(power*sin(radians));
    while(RPS.IsDeadzoneActive() != 2){}
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);

}

void MoveSwitch(float degrees, float power, DigitalInputPin Switch)
{
    float radians = degrees * (PI/180.0);
    front.SetPercent(power*-cos(radians));
    right.SetPercent(power*-sin(radians));
    back.SetPercent(power*cos(radians));
    left.SetPercent(power*sin(radians));
    while(Switch.Value()){};
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
}



void MoveRPS(float power, float FinalX, float FinalY)
{
    float offset = 0;

    float StartX = RPS.X();
    float StartY = RPS.Y();

    //find what quadrant angle is in
    LCD.Clear();

    if (StartX < 0 || StartY < 0)
    {
        MoveTime(180, 50, 50);
    }
    else if ((FinalX < StartX) && (FinalY > StartY))
    {
        offset = 0;
        LCD.WriteAt("Quadrant 2", 1, 1);
    }
    else if ((FinalX < StartX) && (FinalY < StartY))
    {
        offset = 0;
        LCD.WriteAt("Quadrant 3",1,1);
    }
    else if ((FinalX > StartX) && (FinalY > StartY))
    {
        offset = PI;
        LCD.WriteAt("Quadrant 1",1,1);
    }
    else
    {
        offset = PI;
        LCD.WriteAt("Quadrant 4",1,1);
    }



    float radians = atan((FinalX - StartX)/(FinalY - StartY)) + offset;
    float degrees = radians*180/PI;
    LCD.WriteAt(degrees, 1, 50);


    Sleep(100);


    float distance = pow(pow(FinalX-StartX , 2) + pow(FinalY-StartY, 2), .5);
    if (distance < 10)
    {
        MoveTimeFloat(degrees - RPS.Heading(), power, distance/20);
        LCD.WriteAt(distance, 1, 100);
    }








    while((abs(RPS.X() - FinalX) > 1) || (abs(RPS.Y() - FinalY) > 1)){
        MoveRPS(power, FinalX,FinalY);

    }


}

void MoveRPSClose(float power, float FinalX, float FinalY)
{
    float offset = 0;

    float StartX = RPS.X();
    float StartY = RPS.Y();

    //find what quadrant angle is in
    LCD.Clear();

    if (RPS.X() > 0)
    {
        MoveTime(180, 20, 20);
    }
    else if ((FinalX < StartX) && (FinalY > StartY))
    {
        offset = 0;
        LCD.WriteAt("Quadrant 2", 1, 1);
    }
    else if ((FinalX < StartX) && (FinalY < StartY))
    {
        offset = 0;
        LCD.WriteAt("Quadrant 3",1,1);
    }
    else if ((FinalX > StartX) && (FinalY > StartY))
    {
        offset = PI;
        LCD.WriteAt("Quadrant 1",1,1);
    }
    else
    {
        offset = PI;
        LCD.WriteAt("Quadrant 4",1,1);
    }



    float radians = atan((FinalX - StartX)/(FinalY - StartY)) + offset;
    float degrees = radians*180/PI;
    LCD.WriteAt(degrees, 1, 50);


    Sleep(100);


    float distance = pow(pow(FinalX-StartX , 2) + pow(FinalY-StartY, 2), .5);
    MoveTimeFloat(degrees - RPS.Heading(), power, distance/10);
    LCD.WriteAt(distance, 1, 100);







    while((abs(RPS.X() - FinalX) > 0.5) || (abs(RPS.Y() - FinalY) > 0.5)){
        MoveRPSClose(power, FinalX,FinalY);

    }


}

void ChangeOrientation(int time, float direction) //direction is 1.0 for counterclockwise, -1.0 for clockwise
{
    front.SetPercent(direction * IDEALPOWER/2);
    right.SetPercent(direction * IDEALPOWER/2);
    back.SetPercent(direction * IDEALPOWER/2);
    left.SetPercent(direction * IDEALPOWER/2);
    Sleep(time);
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
}

void CheckHeading(float degrees)
{
    while (abs(RPS.Heading() - degrees) > 1.0)
    {
        LCD.Clear();
        if (RPS.Heading() == -2.00)
        {
            MoveTime(180, 50, 50);
        }
        else if((RPS.Heading() > degrees) && ((RPS.Heading() - degrees) < 180))
        {
            ChangeOrientation(20, -1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);

            Sleep(100);
        }

        else if ((RPS.Heading() > degrees) && ((RPS.Heading() - degrees) > 180))
        {
            ChangeOrientation(20, 1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            Sleep(100);
        }
        else if ((RPS.Heading() < degrees) && ((RPS.Heading() - degrees) < 180) )
        {
            ChangeOrientation(20, 1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            Sleep(100);
        }
        else if ((RPS.Heading() < degrees) && (((RPS.Heading() - degrees) < 180)))
        {
            ChangeOrientation(20, -1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            Sleep(100);
        }

    }
}

void SetHeading(float degrees)
{
    while (abs(RPS.Heading() - degrees) > 1.0)
    {


        LCD.Clear();
        if (RPS.Heading() == -2.00)
        {
            MoveTime(180, 25, 20);
        }



        else if((RPS.Heading() > degrees) && ((RPS.Heading() - degrees) < 180))
        {
            float difference = abs(RPS.Heading() - degrees);
            float turnTime = difference * 11;

            ChangeOrientation(turnTime, -1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            LCD.WriteAt(turnTime, 1, 100);


        }

        else if ((RPS.Heading() > degrees) && ((RPS.Heading() - degrees) > 180))
        {
            float difference = abs(RPS.Heading() - degrees);
            float turnTime = ((360 -difference) * 11);


            ChangeOrientation(turnTime, 1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            LCD.WriteAt(turnTime, 1, 100);


        }
        else if ((RPS.Heading() < degrees) && ((RPS.Heading() - degrees) < 180) )
        {
            float difference = abs(RPS.Heading() - degrees);
            float turnTime = (difference * 11);

            ChangeOrientation(turnTime, -1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            LCD.WriteAt(turnTime, 1, 100);

        }
        else if ((RPS.Heading() < degrees) && (((RPS.Heading() - degrees) > 180)))
        {
            float difference = abs(RPS.Heading() - degrees);
            float turnTime = ((360 - difference) * 11);

            ChangeOrientation(turnTime, 1.0);
            LCD.WriteAt(RPS.Heading(),1,1);
            LCD.WriteAt(degrees, 1, 50);
            LCD.WriteAt(turnTime, 1, 100);

        }
        Sleep(20);
    }
}
void RPSY(float Y)
{
    while(abs(RPS.Y()-Y) > 0.1)
    {
    if(RPS.Y() > Y)
    {
        MoveTime(90, 25, (RPS.Y()-Y)/10);
    }
    else if(RPS.Y() < Y)
    {
        MoveTime(270, 25, (RPS.Y()-Y)/10);
    }
    }
}

void StartProgram(AnalogInputPin CdS)
{
    while(CdS.Value() > 2){}
}

void SpinTouch(float power)
{
    float x,y;
    float start = TimeNow();
    LCD.Clear();
    while (!LCD.Touch(&x,&y))
    {
        front.SetPercent(power);
        right.SetPercent(power);
        back.SetPercent(power);
        left.SetPercent(power);
    }
    float finish = TimeNow() - start;
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
    LCD.WriteAt(finish, 1, 1);
}

void MoveTouch(float degrees, float power)
{
    float x,y;
    float radians = degrees * (PI/180.0);
    LCD.Clear();
    float start = TimeNow();
    while (!LCD.Touch(&x,&y))
    {
        front.SetPercent(power*-cos(radians));
        right.SetPercent(power*-sin(radians));
        back.SetPercent(power*cos(radians));
        left.SetPercent(power*sin(radians));
    }
    float finish = TimeNow() - start;
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);
    LCD.WriteAt(finish, 1, 1);
    SD.Printf("%f", finish);

}





void PerformanceTest1Final(){
    StartProgram(CdS_cell);
        MoveSwitch(60,50, FrontSwitch);
        MoveTime(180, IDEALPOWER, 500);
        MoveTime(270, IDEALPOWER, 2500);
        MoveSwitch(180, 80, LeftSwitch);
        MoveSwitch(90,50, FrontSwitch);
        MoveTime(270, IDEALPOWER, 800);
        ChangeOrientation(1022, 1.0);
        MoveTime(225, 75, 5000);
}

void CdS_Test()
{
    float a,b;
while (!LCD.Touch(&a,&b))
{
    LCD.WriteLine(CdS_cell.Value());
    Sleep(100);
}
}
void ChooseButton()
{
    LCD.Clear();
    Sleep(100);
    if(CdS_cell.Value() < 1.5)
    {
        LCD.WriteAt("RED",100,1);

        MoveTime(0,50, 324);
        MoveTime(90,100,250);
        Sleep(100);
        MoveTime(270,50,250);
        MoveTime(0,50, 2721);


    }
    else
    {
        LCD.WriteAt("BLUE",100,1);

        MoveTime(180,50,700);
        MoveTime(90,100,250);
        Sleep(100);
        MoveTime(270,50,250);
        MoveTime(0,50, 3655);



    }

}
void ChooseButtonComp()
{
    MoveTime(270, 25, 250);
    CheckHeading(0);
    LCD.Clear();
    Sleep(50);
    if(CdS_cell.Value() < 1.5)
    {
        LCD.WriteAt("RED",100,1);

        MoveTime(0, 75,333);
        MoveTime(90,40,500);
        Sleep(100);
        MoveTime(270, 40, 500);
        CheckHeading(0);
        MoveTime(0, 75, 802);


    }
    else
    {
        LCD.WriteAt("BLUE",100,1);

        MoveTime(180,75,333);
        MoveTime(90,40,500);
        Sleep(100);
        MoveTime(270, 40, 500);
        CheckHeading(0);
        MoveTime(0, 75, 1389);






    }

}

void WhiteButton(float XPosition, float YPosition)
{
    MoveTime(138, IDEALPOWER, 2000);
    MoveRPS(25,XPosition, YPosition);
    CheckHeading(0);
    MoveTime(90,25,1400);
    MoveDead(90, 25);
}

void DriveUpHill(float degrees, float power)
{

    float radians = degrees * (PI/180.0);
    front.SetPercent(power*-cos(radians));
    right.SetPercent(power*-sin(radians));
    back.SetPercent(power*cos(radians));
    left.SetPercent(power*sin(radians));
    while(Accel.Z() != 0)
    {
        LCD.WriteLine(Accel.Z());
    }
    front.SetPercent(0);
    right.SetPercent(0);
    back.SetPercent(0);
    left.SetPercent(0);


}

void PerformanceTest4Final()
{
    RPS.InitializeTouchMenu();

    SD.OpenLog();
    StartProgram(CdS_cell);
    ServoSetup();
    WhiteButton(26.3, 21.7);
    MoveTime(270, 50, 500);
    MoveTime(180,50, 500);
    ChangeOrientation(1000, -1.0);
    CheckHeading(315);
    MoveTime(315, 75, 3800);
    ChangeOrientation(1000, 1.0);
    CheckHeading(0);
    MoveRPS(25, 28.5, 46.4);
    ChangeOrientation(2500, -1.0);
    CheckHeading(270);



    if(RPS.FuelType() == 1)
    {
        LCD.WriteAt("Octane", 1,1);

        MoveTime(45, 50, 3500);
        ChangeOrientation(1000, -1.0);
        CheckHeading(225);
        MoveTime(90, 25, 100);
        arm_servo.SetDegree(90);
        MoveTime(0, 25, 3500);
        Sleep(100);
        MoveTime(270, 25, 2800);




    }
    else if(RPS.FuelType() == 2)
    {
        LCD.WriteAt("Nitro", 1,1);

        MoveTime(45, 50, 1700);
        ChangeOrientation(1000, -1.0);
        CheckHeading(225);
        arm_servo.SetDegree(90);
        MoveTime(0, 25, 3600);
        Sleep(100);
        MoveTime(90, 25, 3200);


    }
    CheckHeading(225);
    MoveTime(180, 25, 4000);
    SetHeading(180);
    arm_servo.SetDegree(15);
    MoveTouch(315, 50);

    SD.CloseLog();

}



int main(void)
{

   SD.OpenLog();


   RPS.InitializeTouchMenu();

   float a, b, c, d ,e, f, g, h, i, k, l, m, n, o;
     LCD.WriteRC("X Position:",2,0);
     LCD.WriteRC("Y Position:",3,0);

     while (!LCD.Touch(&a, &b))
     {
       LCD.WriteRC("White Button             ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float WhiteButtonX = RPS.X();
     float WhiteButtonY = RPS.Y();
     SD.Printf("%f %f\n", WhiteButtonX, WhiteButtonY);
     Sleep(1500);

     while (!LCD.Touch(&c, &d))
     {
       LCD.WriteRC("Before Car Jack", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float BeforeCarJackX = RPS.X();
     float BeforeCarJackY = RPS.Y();
     SD.Printf("%f %f\n", BeforeCarJackX, BeforeCarJackY);

     Sleep(1500);


     while (!LCD.Touch(&e, &f))
     {
       LCD.WriteRC("Wrench                ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float WrenchX = RPS.X();
     float WrenchY = RPS.Y();
     SD.Printf("%f %f\n", WrenchX, WrenchY);

     Sleep(1500);


     while (!LCD.Touch(&g, &h))
     {
       LCD.WriteRC("Before Garage              ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float BeforeGarageX = RPS.X();
     float BeforeGarageY = RPS.Y();
     SD.Printf("%f %f\n", BeforeGarageX, BeforeGarageY);

     Sleep(1500);

     while (!LCD.Touch(&l, &m))
     {
       LCD.WriteRC("Before Nitro              ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float BeforeNitroX = RPS.X();
     float BeforeNitroY = RPS.Y();
     SD.Printf("%f %f\n", BeforeNitroX, BeforeNitroY);


     Sleep(1500);

     while (!LCD.Touch(&n, &o))
     {
       LCD.WriteRC("After Fuel Crank             ", 0, 0);
       LCD.WriteRC(RPS.X(),2,12); //update the x coordinate
       LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate
     }
     float AfterFuelCrankX = RPS.X();
     float AfterFuelCrankY = RPS.Y();
     SD.Printf("%f %f\n", AfterFuelCrankX, AfterFuelCrankY);


     Sleep(1500);


     while (!LCD.Touch(&i, &k))
     {}


    StartProgram(CdS_cell);
    WhiteButton(WhiteButtonX, WhiteButtonY);
    ChooseButtonComp();
    MoveRPS(25, BeforeCarJackX, BeforeCarJackY);//Find position between control panel and Car Jack
    CheckHeading(0);
    MoveTime(45, 75, 2200); //Move to corner of course
    MoveTime(180, 50, 1000);//Hit Car Jack
    MoveTime(0, 50, 250);// Move back from car jack
    CheckHeading(0);
    MoveTime(270, 25, 3400); //Align with Wrench
    MoveTime(180, 50, 250);
    CheckHeading(0);
    MoveRPS(35, WrenchX + 2, WrenchY);
    CheckHeading(0);
    arm_servo.SetDegree(178);
    Sleep(1000);
    MoveTime(0, 25, 1500); //Move to Wrencg
    MoveTime(270, 50, 100);
    arm_servo.SetDegree(90);
    Sleep(1000);
    MoveTime(180, 25, 1000);
    MoveTime(290, 50, 1900);
    ChangeOrientation(1000, -1.0);
    CheckHeading(315);
    MoveTime(45, 50, 600);
    MoveTime(315, 100, 3200); //Up ramp
    CheckHeading(315);
    MoveTime(270, 50, 2600); //Towards Garage
    CheckHeading(315);
    MoveRPS(35, BeforeGarageX, BeforeGarageY);
    MoveTime(0,25, 4200);
    arm_servo.SetDegree(178);
    Sleep(300);
    MoveTime(180, 25, 50);
    Sleep(300);
    MoveTime(0, 25, 50);
    Sleep(300);
    MoveTime(180, 50, 1000);
    arm_servo.SetDegree(90);
    Sleep(1000);

    CheckHeading(315);
    ChangeOrientation(2000, -1.0);
    CheckHeading(225);

    if(RPS.FuelType() == 1)
    {
        arm_servo.SetDegree(100);
        MoveTime(0, 25, 3400);
        MoveTime(270, 25, 4000);
        MoveTime(180, 50, 1700);
        ChangeOrientation(1000, 1.0);
        MoveTouch(315, 50);
    }

    else if(RPS.FuelType() == 2)
    {
        arm_servo.SetDegree(100);
        MoveRPS(25, BeforeGarageX, BeforeGarageY);
        CheckHeading(225);
        MoveTime(270, 50, 500);
        MoveRPS(25, BeforeNitroX - 5.5, BeforeNitroY - 6.5);
        CheckHeading(225);
        MoveTime(0, 25, 3600);
        MoveTime(90, 25, 4000);
        MoveTime(180, 50, 1700);
        ChangeOrientation(1000, 1.0);
        MoveTouch(225, 50);


    }
    MoveRPS(35, AfterFuelCrankX, AfterFuelCrankY);
    arm_servo.SetDegree(10);
    MoveTouch(180, 75);
    Sleep(500);
    MoveTouch(90, 75);
    Sleep(500);
    ChangeOrientation(2000, 1.0);
    MoveTouch(270, 75);


    SD.CloseLog();




   return 0;
}

